---
# hosts could have been "remote" or "all" as well
- hosts: vrops
  gather_facts: no
  tasks:
   - name: Get a Bearer Token
     vrarest:
       host: vra-01a.corp.local
       rest_method: get_bearer_token
       username: jason
       password: VMware1!
       tenant: vsphere.local

     register: bearer_result

   - debug: msg="The returned token is {{ bearer_result.token }}"

   - name: Get the Catalog Items
     vrarest:
       host: vra-01a.corp.local
       rest_method: get_catalog_items
       token: "{{ bearer_result.token }}"

     register: catalog_items_result

   # This loop iterates over the list of catalog items returned from the
   # "get_catalog_items" call, and searches for the one with the name matching
   # the blueprint name being sought.  Once it finds it, it retrieves the
   # relevant information from that item, and sets the appropriate variables to
   # those values.
   - name: Iterate over catalog items to find the blueprint and set the variable
     set_fact:
       catalog_item_id: "{{ item.catalogItemId }}"
     with_items: "{{ catalog_items_result['response_json'].content }}"
     when: item.name == "CentOS 6.3"

   - debug:
       msg: Catalog item ID is {{ catalog_item_id }}

   # Retrieve the blueprint with the specified ID.
   - name: Retrieve the blueprint template
     vrarest:
       host: vra-01a.corp.local
       rest_method: get_blueprint_template
       token: "{{ bearer_result.token }}"
       catalog_item_id: "{{ catalog_item_id }}"
       vm_template: "{{ catalog_item_id }}"

     register: catalog_template_result

   - debug:
       msg: Template is {{ catalog_template_result['response_json'] }}

   # It is at this point that the template can be modified to change the default
   # values within it, such as the amount of memory or the number of CPUs.  The
   # template will become the configuration object that defines the VM being
   # provisioned.
   - name: Set the blueprint template object
     set_fact:
       blueprint_template: "{{ catalog_template_result['response_json'] }}"

   - name: Set the amount of memory for the VM
     set_fact:
       blueprint_template.data.

   #- name: Set the blueprint template string
    #   set_fact:
    #   blueprint_template_str: "{{ catalog_item_id }}"

   - debug: msg="The template object is {{ blueprint_template }}"

   - debug:
      msg: Template business group ID is {{ blueprint_template['businessGroupId'] }}

   # The output object is just a construct that allows the underlying Python
   # code to print out debugging statements to the calling Ansible script.
   - debug: msg="The returned output is {{ catalog_template_result.output }}"

   # Submit the blueprint provisioning request using the template object
   # returned by the previous call.
   - name: Submit the blueprint provisioning request using the template.
     vrarest:
       host: vra-01a.corp.local
       rest_method: submit_blueprint_request
       token: "{{ bearer_result.token }}"
       vm_template: "{{ blueprint_template }}"
       catalog_item_id: "{{ catalog_item_id }}"

     register: blueprint_request_result

   - debug: msg="The returned output is {{ blueprint_request_result.output }}"
